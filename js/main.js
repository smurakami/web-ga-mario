// Generated by CoffeeScript 1.12.2
(function() {
  var GA, Game, Gene, GeneUnit, Mario, Point, Stage, Util, game, stage, stageData;

  Util = (function() {
    function Util() {}

    Util.getRatio = function(canvas) {
      var backingStoreRatio, context, devicePixelRatio, ratio;
      context = canvas.getContext('2d');
      devicePixelRatio = window.devicePixelRatio || 1;
      backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
      ratio = devicePixelRatio / backingStoreRatio;
      return ratio;
    };

    Util.randomBool = function() {
      return Math.random() > 0.5;
    };

    Util.randomInt = function(max) {
      return Math.floor(Math.random() * max);
    };

    Util.randomColor = function() {
      var color_b_index, color_elem, color_g_index, color_r_index, r_bin;
      color_elem = [255, Util.randomInt(255), 0];
      color_r_index = Util.randomInt(3);
      r_bin = Util.randomInt(2);
      color_g_index = (color_r_index + 1 + r_bin) % 3;
      color_b_index = (color_r_index + 1 + !r_bin) % 3;
      return "rgb(" + color_elem[color_r_index] + ", " + color_elem[color_g_index] + ", " + color_elem[color_b_index] + ")";
    };

    Util.sum = function(array) {
      var j, len, sum, val;
      sum = 0;
      for (j = 0, len = array.length; j < len; j++) {
        val = array[j];
        sum += val;
      }
      return sum;
    };

    return Util;

  })();

  stageData = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];

  stage = null;

  Stage = (function() {
    Stage.width = 20;

    Stage.height = 10;

    function Stage() {
      stage = this;
      this.data = stageData;
    }

    Stage.prototype.draw = function() {
      var context, j, len, ref, results, row, unit, val, x, y;
      context = game.context;
      unit = Game.unit;
      ref = this.data;
      results = [];
      for (y = j = 0, len = ref.length; j < len; y = ++j) {
        row = ref[y];
        results.push((function() {
          var k, len1, results1;
          results1 = [];
          for (x = k = 0, len1 = row.length; k < len1; x = ++k) {
            val = row[x];
            if (val === 0) {
              context.fillStyle = '#7ecef4';
            } else if (val === 1) {
              context.fillStyle = '#7e6b5a';
              context.strokeStyle = 'black';
            }
            context.fillRect(x * unit, y * unit, unit, unit);
            results1.push(context.strokeRect(x * unit, y * unit, unit, unit));
          }
          return results1;
        })());
      }
      return results;
    };

    Stage.prototype.at = function(x, y) {
      var unit;
      if (x.constructor === Point) {
        y = x.y;
        x = x.x;
      }
      unit = Game.unit;
      x = Math.floor(x / unit);
      y = Math.floor(y / unit);
      if (x < 0 || x >= Stage.width || y < 0 || y >= Stage.height) {
        return 0;
      }
      return this.data[y][x];
    };

    return Stage;

  })();

  Number.prototype.isField = function() {
    return this == 1;
  };

  Point = (function() {
    function Point(x, y) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (this === window) {
        return new Point(x, y);
      }
      this.x = x;
      this.y = y;
    }

    Point.atIndex = function(x, y) {
      var unit;
      unit = Game.unit;
      return Point(x * unit + unit / 2, y * unit + unit / 2);
    };

    Point.prototype.toIndex = function() {
      var x, y;
      x = Math.floor(this.x / unit);
      y = Math.floor(this.y / unit);
      return Point(x, y);
    };

    Point.prototype.addi = function(other) {
      this.x += other.x;
      return this.y += other.y;
    };

    Point.prototype.add = function(other) {
      return Point(this.x + other.x, this.y + other.y);
    };

    return Point;

  })();

  Mario = (function() {
    function Mario() {
      this.pos = Point.atIndex(0, 0);
      this.v = Point();
      this.size = Point(Game.unit, Game.unit);
      this.isJumping = true;
      this.right = false;
      this.left = false;
      this.up = false;
      this.prev_up = false;
      this.down = false;
      this.color = '#e64141';
    }

    Mario.prototype.draw = function() {
      var context, x, y;
      context = game.context;
      context.fillStyle = this.color;
      x = this.pos.x - this.size.x / 2;
      y = this.pos.y - this.size.y / 2;
      return context.fillRect(x, y, this.size.x, this.size.y);
    };

    Mario.prototype.update = function() {
      var centerBottom, centerTop, leftBottom, leftTop, next, rightBottom, rightTop;
      if (this.isJumping) {
        this.v.y += Game.gravity;
      }
      if (this.right && this.left) {
        this.v.x = 0;
      } else if (this.right) {
        this.v.x = 2;
      } else if (this.left) {
        this.v.x = -2;
      } else {
        this.v.x = 0;
      }
      if (this.up && !this.isJumping) {
        this.v.y = -5;
        this.isJumping = true;
      }
      next = this.pos.add(this.v);
      leftTop = next.add(Point(-this.size.x / 2 + 1, -this.size.y / 2));
      rightTop = next.add(Point(this.size.x / 2 - 1, -this.size.y / 2));
      centerTop = next.add(Point(0, -this.size.y / 2));
      leftBottom = next.add(Point(-this.size.x / 2 + 1, this.size.y / 2));
      rightBottom = next.add(Point(this.size.x / 2 - 1, this.size.y / 2));
      centerBottom = next.add(Point(0, this.size.y / 2));
      if (stage.at(next.x + this.size.x / 2, next.y).isField()) {
        this.v.x = 0;
        next.x = Math.floor(next.x / Game.unit) * Game.unit + this.size.x / 2;
      }
      if (stage.at(next.x - this.size.x / 2, next.y).isField()) {
        this.v.x = 0;
        next.x = Math.floor(next.x / Game.unit + 1) * Game.unit - this.size.x / 2;
      }
      leftTop = next.add(Point(-this.size.x / 2 + 1, -this.size.y / 2));
      rightTop = next.add(Point(this.size.x / 2 - 1, -this.size.y / 2));
      centerTop = next.add(Point(0, -this.size.y / 2));
      leftBottom = next.add(Point(-this.size.x / 2 + 1, this.size.y / 2));
      rightBottom = next.add(Point(this.size.x / 2 - 1, this.size.y / 2));
      centerBottom = next.add(Point(0, this.size.y / 2));
      if (stage.at(centerTop).isField()) {
        this.v.y = 0;
        next.y = Math.floor(next.y / Game.unit) * Game.unit + this.size.y / 2;
      }
      if (stage.at(leftBottom).isField() || stage.at(rightBottom).isField() || stage.at(centerBottom).isField()) {
        this.v.y = 0;
        next.y = Math.floor(next.y / Game.unit) * Game.unit + this.size.y / 2;
        this.isJumping = false;
      }
      if (!stage.at(leftBottom).isField() && !stage.at(rightBottom).isField() && !stage.at(centerBottom).isField()) {
        this.isJumping = true;
      }
      this.pos = next;
      return this.prev_up = this.up;
    };

    return Mario;

  })();

  GeneUnit = (function() {
    function GeneUnit(left, up, right) {
      if (this === window) {
        return new GeneUnit(left, up, right);
      }
      this.left = left;
      this.up = up;
      this.right = right;
    }

    GeneUnit.prototype.copy = function() {
      return GeneUnit(this.left, this.up, this.right);
    };

    GeneUnit.random = function() {
      return GeneUnit(Util.randomBool(), Util.randomBool(), Util.randomBool());
    };

    return GeneUnit;

  })();

  Gene = (function() {
    function Gene() {
      var i;
      window.gene = this;
      this.data = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = Math.pow(2, 7); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results.push(GeneUnit.random());
        }
        return results;
      })();
      this.mario = new Mario();
      this.mario.color = Util.randomColor();
    }

    Gene.prototype.copy = function() {
      var gene, unit;
      gene = new Gene();
      gene.data = (function() {
        var j, len, ref, results;
        ref = this.data;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          unit = ref[j];
          results.push(unit.copy());
        }
        return results;
      }).call(this);
      return gene;
    };

    Gene.prototype.getMap = function() {
      var array, centerTop, j, leftBottom, leftCenter, leftTop, len, pos, rightBottom, rightCenter, rightTop, size, sum, val;
      pos = this.mario.pos;
      size = this.mario.size;
      leftBottom = stage.at(pos.x - size.x, pos.y + size.y);
      leftCenter = stage.at(pos.x - size.x, pos.y);
      leftTop = stage.at(pos.x - size.x, pos.y - size.y);
      centerTop = stage.at(pos.x, pos.y - size.y);
      rightTop = stage.at(pos.x + size.x, pos.y - size.y);
      rightCenter = stage.at(pos.x + size.x, pos.y);
      rightBottom = stage.at(pos.x + size.x, pos.y + size.y);
      array = [leftBottom, leftCenter, leftTop, centerTop, rightTop, rightCenter, rightBottom];
      sum = 0;
      for (j = 0, len = array.length; j < len; j++) {
        val = array[j];
        sum = sum * 2 + val;
      }
      return sum;
    };

    Gene.prototype.update = function() {
      var geneunit, val;
      val = this.getMap();
      geneunit = this.data[val];
      if (geneunit == null) {
        console.log(val);
        console.log('undefiend');
        return;
      }
      this.mario.up = geneunit.up;
      this.mario.left = geneunit.left;
      this.mario.right = geneunit.right;
      return this.mario.update();
    };

    Gene.prototype.draw = function() {
      return this.mario.draw();
    };

    return Gene;

  })();

  GA = (function() {
    function GA() {
      var i;
      this.size = 128;
      this.current = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = this.size; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results.push(new Gene);
        }
        return results;
      }).call(this);
      this.counter = 0;
    }

    GA.prototype.update = function() {
      var gene, j, len, max, ref;
      max = Math.min(this.counter, this.size - 1);
      ref = this.current.slice(0, max);
      for (j = 0, len = ref.length; j < len; j++) {
        gene = ref[j];
        gene.update();
      }
      return this.counter++;
    };

    GA.prototype.draw = function() {
      var gene, j, len, max, ref, results;
      max = Math.min(this.counter, this.size - 1);
      ref = this.current.slice(0, max);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        gene = ref[j];
        results.push(gene.draw());
      }
      return results;
    };

    GA.prototype.getScore = function(gene) {
      return gene.mario.pos.x;
    };

    GA.prototype.nextGenerateion = function() {
      var child, dice, gene, i, j, next, ref, scores;
      scores = (function() {
        var j, len, ref, results;
        ref = this.current;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          gene = ref[j];
          results.push(this.getScore(gene));
        }
        return results;
      }).call(this);
      next = [];
      for (i = j = 0, ref = this.size; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        dice = Util.randomInt(100);
        if (dice < 70) {
          child = this.cross(this.roulette(scores), this.roulette(scores));
        } else if (dice < 96) {
          child = this.copy(this.roulette(scores));
        } else {
          child = this.mutate(this.roulette(scores));
        }
        next.push(child);
      }
      return this.current = next;
    };

    GA.prototype.roulette = function(scores) {
      var current, dice, index, j, len, min, score, sum;
      min = Math.min.apply(Math, scores);
      scores = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = scores.length; j < len; j++) {
          score = scores[j];
          results.push(score - min);
        }
        return results;
      })();
      sum = Util.sum(scores);
      dice = Math.random() * sum;
      current = 0;
      for (index = j = 0, len = scores.length; j < len; index = ++j) {
        score = scores[index];
        current += score;
        if (current > dice) {
          return this.current[index];
        }
      }
      console.log('ルーレットミス');
      return ksdfa;
    };

    GA.prototype.mutate = function(gene) {
      var a, b, begin, child, end, i, j, ref, ref1;
      a = Util.randomInt(gene.data.length);
      b = Util.randomInt(gene.data.length);
      begin = Math.min(a, b);
      end = Math.max(a, b) + 1;
      child = new Gene();
      for (i = j = ref = begin, ref1 = end; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
        child.data[i] = GeneUnit.random();
      }
      return child;
    };

    GA.prototype.cross = function(a, b) {
      var child, i, j, k, ref, ref1, ref2, x;
      x = Util.randomInt(gene.data.length);
      child = new Gene();
      for (i = j = 0, ref = x; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        child.data[i] = a.data[i].copy();
      }
      for (i = k = ref1 = x, ref2 = child.data.length; ref1 <= ref2 ? k < ref2 : k > ref2; i = ref1 <= ref2 ? ++k : --k) {
        child.data[i] = b.data[i].copy();
      }
      return child;
    };

    GA.prototype.copy = function(gene) {
      return gene.copy();
    };

    return GA;

  })();

  game = null;

  Game = (function() {
    Game.unit = 40;

    Game.width = 1000;

    Game.height = 400;

    Game.gravity = 0.03;

    Game.playerEnabled = false;

    function Game() {
      game = this;
      this.initCanvas();
      this.stage = new Stage();
      if (Game.playerEnabled) {
        this.mario = new Mario();
      }
      this.ga = new GA();
      setInterval((function(_this) {
        return function() {
          _this.update();
          return _this.draw();
        };
      })(this));
    }

    Game.prototype.initCanvas = function() {
      var $canvas, ratio;
      $canvas = $('<canvas></canvas>');
      $('#main').append($canvas);
      this.canvas = $canvas.get(0);
      ratio = Util.getRatio(this.canvas);
      this.canvas.width = Game.width * ratio;
      this.canvas.height = Game.height * ratio;
      this.canvas.style.width = Game.width + 'px';
      this.canvas.style.height = Game.height + 'px';
      Game.unit *= ratio;
      Game.width *= ratio;
      Game.gravity *= ratio;
      return this.context = this.canvas.getContext('2d');
    };

    Game.prototype.update = function() {
      if (Game.playerEnabled) {
        this.mario.update();
      }
      return this.ga.update();
    };

    Game.prototype.draw = function() {
      this.context.clearRect(0, 0, Game.width, Game.height);
      this.stage.draw();
      if (Game.playerEnabled) {
        this.mario.draw();
      }
      return this.ga.draw();
    };

    Game.prototype.onLeft = function() {
      if (Game.playerEnabled) {
        return this.mario.left = true;
      }
    };

    Game.prototype.onRight = function() {
      if (Game.playerEnabled) {
        return this.mario.right = true;
      }
    };

    Game.prototype.onUp = function() {
      if (Game.playerEnabled) {
        return this.mario.up = true;
      }
    };

    Game.prototype.onDown = function() {
      if (Game.playerEnabled) {
        return this.mario.down = true;
      }
    };

    Game.prototype.offLeft = function() {
      if (Game.playerEnabled) {
        return this.mario.left = false;
      }
    };

    Game.prototype.offRight = function() {
      if (Game.playerEnabled) {
        return this.mario.right = false;
      }
    };

    Game.prototype.offUp = function() {
      if (Game.playerEnabled) {
        return this.mario.up = false;
      }
    };

    Game.prototype.offDown = function() {
      if (Game.playerEnabled) {
        return this.mario.down = false;
      }
    };

    return Game;

  })();

  $(function() {
    new Game();
    $(window).keydown(function(e) {
      if (e.key === 'ArrowUp') {
        game.onUp();
      }
      if (e.key === 'ArrowDown') {
        game.onDown();
      }
      if (e.key === 'ArrowLeft') {
        game.onLeft();
      }
      if (e.key === 'ArrowRight') {
        game.onRight();
      }
      if (e.key === 'g') {
        return game.ga.nextGenerateion();
      }
    });
    return $(window).keyup(function(e) {
      if (e.key === 'ArrowUp') {
        game.offUp();
      }
      if (e.key === 'ArrowDown') {
        game.offDown();
      }
      if (e.key === 'ArrowLeft') {
        game.offLeft();
      }
      if (e.key === 'ArrowRight') {
        return game.offRight();
      }
    });
  });

}).call(this);
